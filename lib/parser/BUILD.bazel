load("@rules_cc//cc:defs.bzl", "cc_library")

load("@bazel_skylib//rules:common_settings.bzl",
     "bool_flag", "string_flag")

load("@makeheaders//rules:makeheaders.bzl", "makeheaders")

load("//config/cc:CONFIG.bzl",
     "BASE_COPTS",
     "BASE_DEFINES",
     "BASE_LOCAL_DEFINES",
     "BASE_DEPS",
     "BASE_LINKOPTS")

COPTS         = BASE_COPTS
DEPS          = BASE_DEPS
LINKOPTS      = BASE_LINKOPTS

exports_files([
    "opam_package.c",
    "opam_parser.c",
    "opam_syntaxis.c"
])

######################################################
## dev flag tells Bazel to regenerate the parser
bool_flag(name = "dev", build_setting_default = False)
config_setting(name = "dev?", flag_values = {":dev": "True"})

###########
cc_library(
    name = "opam_parser",
    srcs = [
        "opam_parser.c",
        "opam_package.c",
        ":mkhdrs"
    ],
    implementation_deps = DEPS + [
        ":opam_syntaxis",
        "//lib/lexer:opam_lexer",
    ],
    includes = ["."],
    copts = COPTS + [
        "-I$(GENDIR)",
        # "-Wno-unused-variable", # in lemon-generated code
    ],
    defines = BASE_DEFINES + select({
        ## for strdup, strndup:
        "@platforms//os:linux": ["_POSIX_C_SOURCE=200809L"],
        "//conditions:default": []
    }),
    # local_defines = ["LEXDEBUG"] + select({
    #     ":lexdebug-enabled": ["LEXDEBUG"],
    #     "//conditions:default":   []
    # }),
    visibility = [
        "//lib:__pkg__",
        "//extender:__pkg__",
        "//test:__subpackages__"
    ]
)

###########
cc_library(
    name = "opam_syntaxis",
    srcs = select({
        ":dev?": [
            "//lib/parser/syntaxis:opam_syntaxis.c",
        ],
        "//conditions:default": [
            "opam_syntaxis.c",
        ]
    }) + [":mkhdrs"],
    copts = COPTS + [
        "-Wno-unused-variable",  # from lemon-generated code
        "-Wno-unused-parameter",  # from lemon-generated code
        "-I.", ## DO NOT REMOVE!!!
        "-I$(GENDIR)/lib/parser",
        "-Ilib/parser"
    ],
    implementation_deps = [
        "@liblogc//lib:logc",
        "@uthash//lib:uthash"
    ],
    defines = ["YYDEBUG"] + BASE_DEFINES + select({
        ## for strdup, strndup:
        "@platforms//os:linux": ["_POSIX_C_SOURCE=200809L"],
        "//conditions:default": []
    }) + select({
        "@lemon//parser:debug?": ["YYDEBUG"],
        "//conditions:default":   []
    }) + select({
        "@lemon//parser:trace?": ["YYTRACE"],
        "//conditions:default":   []
    }),
    # to add: YYDEBUG_FILTER, etc.
    visibility = ["//test:__subpackages__"]
)

################################################################
makeheaders(
    name = "mkhdrs",
    hdrs_srcs = [
        "opam_parser.c",
        "opam_package.c", ## ast node types, etc.
    ] + select({
        "//lib/parser:dev?": [
            "//lib/parser/syntaxis:opam_syntaxis.c"
        ],
        "//conditions:default": [
            "opam_syntaxis.c"
        ],
    }),
    additional_srcs = [
        # "//lib/lexer:opamlexer.h",
    ] + select({
        "//lib/lexer:dev?": [
            "//lib/lexer/lexis:opam_lexis.c",
        ],
        "//conditions:default": [
            "//lib/lexer:opam_lexis.c",
        ]
    }) + select({
        "@obazl_tools_cc//profile:dev?": [
            "@liblogc//macros:ansi_colors.h",
            "@liblogc//macros:logging_debug.h"
        ],
        "//conditions:default": [
            "@liblogc//macros:logging_ndebug.h"
        ]
    }),
    visibility = ["//visibility:public"]
)

# makeheaders(
#     name = "mkhdrs_export",
#     out = "opamc.h",
#     export_interface = True,
#     hdrs_srcs = [
#         # "opam_config.c",
#         # "opam_lexer.c",
#         "opam_parser.c",
#         "opam_syntaxis.c",
#         "opam_package.c",
#         # "opam_lexis.c",
#         # "//lib/emitters:mkhdrs"
#     ],
#     visibility = ["//visibility:public"]
# )


## generic debug flags go in @lemon//parser
# bool_flag(name = "debug-exit-on-error", build_setting_default = 0)
# config_setting(name = "debug-exit-on-error-enabled",
#                flag_values = {":debug-exit-on-error": "True"})

## debug flags specific to this grammar
bool_flag(name = "debug-fpf", build_setting_default = False)
config_setting(name = "debug-fpf?",
               flag_values = {":debug-fpf": str(True)})
               # flag_values = {":debug-rules": "fpf"})

bool_flag(name = "debug-fvf", build_setting_default = False)
config_setting(name = "debug-fvf?",
               flag_values = {":debug-fvf": str(True)})
               # flag_values = {":debug-rules": "fvf"})

bool_flag(name = "debug-filter", build_setting_default = False)
config_setting(name = "debug-filter?",
               flag_values = {":debug-filter": str(True)})
               # flag_values = {":debug-rules": "filter"})

bool_flag(name = "debug-build-filter", build_setting_default = False)
config_setting(name = "debug-build-filter?",
               flag_values = {":debug-build-filter": str(True)})


# bool_flag(name = "yytrace", build_setting_default = 0)
# config_setting(name = "yytrace-enabled", flag_values = {":yytrace": "True"})
# config_setting(name = "yytrace-disabled", flag_values = {":yytrace": "False"})

# ## debug parse rules
# string_flag(name = "debug-rules", build_setting_default = "")

# ## enable lexer debugging: --//bootstrap:lexdebug
# bool_flag(name = "lexdebug", build_setting_default = 0)
# config_setting(name = "lexdebug-enabled", flag_values = {":lexdebug": "True"})
# config_setting(name = "lexdebug-disabled", flag_values = {":lexdebug": "False"})

# string_flag(name = "lexdebug-rules", build_setting_default = "")
# config_setting(name = "lexdebug-version",
#                flag_values = {":lexdebug-rules": "version"})
# config_setting(name = "lexdebug-fpf",
#                flag_values = {":lexdebug-rules": "fpf"})
# config_setting(name = "lexdebug-fvf",
#                flag_values = {":lexdebug-rules": "fvf"})
# config_setting(name = "lexdebug-filter",
#                flag_values = {":lexdebug-rules": "filter"})
# config_setting(name = "lexdebug-build-filter",
#                flag_values = {":lexdebug-rules": "build-filter"})

